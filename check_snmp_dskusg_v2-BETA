#!/usr/bin/perl

use strict;
use warnings;
use Net::SNMP;
use Carp qw/croak/;

# Nagios parsable return codes
our $OK = 0;
our $WARNING = 1;
our $CRITICAL = 2;
our $UNKNOWN = 3;
our $storbase= '.1.3.6.1.2.1.25.2.3';

package Net::SNMP::DskUsg;
use Carp qw/carp/;
sub new {
	my $class = shift;
	my $args = shift;
	$class = ref($class) || $class;
	return bless {}, $class;
}

sub get {
	my $self = shift;
	my $host = shift;
	my $community = shift;
	my $table;

    my ($session, $error) = Net::SNMP->session(
		-hostname   => $host,
		-version        => '1',
		-retries        => 3,
		-timeout        => 10,
		-community  => $community
	);
	if ($error) {
		carp "UNKNOWN - cannot establish connection, $error\n";
		exit $UNKNOWN;
	}
	my $result = $session->get_table(
		-baseoid        => $storbase,
	);
	if ($session->error_status()) {
		carp "UNKNOWN - cannot fetch data, ".$session->error()."\n";
		exit $UNKNOWN;
	}
	$session->close;
	foreach (sort keys %{$result}) {
		my $desc = $_;
		$desc =~ s/\.([0-9]+?)\.([0-9]+?)$/.3.$2/;
		my $idx = $_;
		if($idx =~ /^.1.3.6.1.2.1.25.2.3.1.5/) {
			$idx = 'total';
		} elsif($idx =~ /^.1.3.6.1.2.1.25.2.3.1.6/) {
			$idx = 'used';
		} elsif($idx =~ /^.1.3.6.1.2.1.25.2.3.1.7/) {
			$idx = 'failures';
		} elsif($idx =~ /^.1.3.6.1.2.1.25.2.3.1.1/) {
			$idx = 'index';
		} elsif($idx =~ /^.1.3.6.1.2.1.25.2.3.1.3/) {
			$idx = 'description';
		} elsif($idx =~ /^.1.3.6.1.2.1.25.2.3.1.4/) {
			$idx = 'sau';
		} elsif($idx =~ /^.1.3.6.1.2.1.25.2.3.1.2/) {
			$idx = 'type';
		}
		$table->{$result->{$desc}}->{$idx} = $result->{$_};
	}
	foreach (sort keys %{$table}) {
		eval { $table->{$_}->{total_1k} = $table->{$_}->{total} * ($table->{$_}->{sau} / 1024) };
		eval { $table->{$_}->{used_1k} = $table->{$_}->{used} * ($table->{$_}->{sau} / 1024) };
		eval { $table->{$_}->{total_human} = _convert($table->{$_}->{total} * $table->{$_}->{sau}) };
		eval { $table->{$_}->{used_human} = _convert($table->{$_}->{used} * $table->{$_}->{sau}) };
		eval { $table->{$_}->{used_percent} = sprintf("%.6f", $table->{$_}->{used} / ($table->{$_}->{total}/100)) };
	}

	if (!$table) {
		carp "UNKNOWN - no data for found\n";
		exit $UNKNOWN;
	}
	return $table;
}

package Net::SNMP::DskUsg::Cached;
use base 'Net::SNMP::DskUsg';
use Storable qw/lock_store lock_retrieve/;
sub new {
	my $proto = shift;
	my $class = ref($proto) || $proto;

	my %parameters = ();
	if(ref($_[0]) eq 'HASH') {
		%parameters = %{$_[0]};
	} else {
		%parameters = @_;
	}

	my $self = $class->SUPER::new(\%parameters);
	if($parameters{cache}) {
		$self->{PATH} = $parameters{cache};
	} else {
		$self->{PATH} = '/tmp';
	}
	return $self;
}

sub get {
	my $self = shift;
	my $host = shift;
	my $community = shift;

	my $cache = {};
	eval { $cache = lock_retrieve( $self->{PATH} . "/$host.dat" ); };
	$cache = {} if ($@ or !$cache);

	if($cache->{$host} && !$self->_older_than(5, $cache->{$host}->{cached})) {
		#return $cache->{$host}->{dta};
	}
	my $dta = $self->SUPER::get($host, $community);

	# Calculate free
	foreach(keys %{$dta}) {
		$dta->{$_}->{free} = $dta->{$_}->{total} - $dta->{$_}->{used};
		$dta->{$_}->{free_1k} = $dta->{$_}->{total_1k} - $dta->{$_}->{used_1k};
	}

	if($cache->{$host}) {
		foreach(keys %{$dta}) {
			# Save and calculate some values for later use
			if($cache->{$host}->{dta}->{$_}) {
				# Absolute values
				$dta->{$_}->{last_used} = $cache->{$host}->{dta}->{$_}->{used};
				$dta->{$_}->{last_used_1k} = $cache->{$host}->{dta}->{$_}->{used_1k};
				$dta->{$_}->{used_ch} = $dta->{$_}->{used} - $cache->{$host}->{dta}->{$_}->{used};
				$dta->{$_}->{used_1k_ch} = $dta->{$_}->{used_1k} - $cache->{$host}->{dta}->{$_}->{used_1k};

				# Percent
				$dta->{$_}->{last_used_percent} = $cache->{$host}->{dta}->{$_}->{used_percent};
				my $x = $dta->{$_}->{used_percent}||0;
				my $y = $cache->{$host}->{dta}->{$_}->{used_percent}||0;
				$dta->{$_}->{used_percent_ch} = sprintf("%.6f", $x - $y);
			} else {
				# Absolute values
				$dta->{$_}->{last_used} = $dta->{$_}->{used};
				$dta->{$_}->{last_used_1k} = $dta->{$_}->{used_1k};
				$dta->{$_}->{used_ch} = 0;
				$dta->{$_}->{used_1k_ch} = 0;

				# Percent
				$dta->{$_}->{last_used_percent} = $dta->{$_}->{used_percent};
				$dta->{$_}->{used_percent_ch} = 0;
			}

			# Calculate current blocks/s rate
			$dta->{$_}->{blocks_s} = sprintf("%.6f", $dta->{$_}->{used_ch} / (time() - $cache->{$host}->{cached}));
			# Calculate current kb/s rate
			$dta->{$_}->{kb_s} = sprintf("%.6f", $dta->{$_}->{used_1k_ch} / (time() - $cache->{$host}->{cached}));

			# Calculate current percent/s rate
			$dta->{$_}->{perc_s} = sprintf("%.6f", $dta->{$_}->{used_percent_ch} / (time() - $cache->{$host}->{cached}));

			if($cache->{$host}->{dta}->{$_}->{blocks_rate_s}) {
				# Average here... Need to calculate with %, since we can have a negative rate
				$dta->{$_}->{blocks_rate_s} = $cache->{$host}->{dta}->{$_}->{blocks_rate_s} * (100 + $dta->{$_}->{used_percent_ch}) / 100;
			} else {
				$dta->{$_}->{blocks_rate_s} = $dta->{$_}->{blocks_s};
			}
			if($cache->{$host}->{dta}->{$_}->{kb_rate_s}) {
				# Geometric average here... TODO. Good enough?
				my $po = $cache->{$host}->{dta}->{$_}->{kb_rate_s} * $dta->{$_}->{kb_s};
				if($po > 0) {
					$dta->{$_}->{kb_rate_s} = sqrt($po);
				} else {
					$dta->{$_}->{kb_rate_s} = $cache->{$host}->{dta}->{$_}->{kb_rate_s};
				}
			} else {
				$dta->{$_}->{kb_rate_s} = $dta->{$_}->{kb_s};
			}

			# When will it be full?
			if($dta->{$_}->{blocks_rate_s} != 0) {
				$dta->{$_}->{full_in_s} = $dta->{$_}->{free} / $dta->{$_}->{blocks_rate_s};
				$dta->{$_}->{full_in_days} = $dta->{$_}->{full_in_s} / 60 / 24;
			} else {
				$dta->{$_}->{full_in_s} = -1;
				$dta->{$_}->{full_in_days} = -1;
			}
		}
	}
use Data::Dumper;
warn Dumper($dta->{'/var'});
	$cache->{$host} = {
		dta	=> $dta,
		cached => time(),
	};
	unless(lock_store($cache, $self->{PATH} . "/$host.dat")) {
		croak("ERROR I/O problem while storing cachefile!");
	}

	return $cache->{$host}->{dta};
}

sub _older_than {
	my $self = shift;
	my $timeframe = shift;
	my $cached = shift;
	my $now = time();
	if($cached < ($now - $timeframe * 60)) {
		return 1;
	} else {
		return 0;
	}
}

package main;

use Getopt::Long;
use Data::Dumper;
Getopt::Long::Configure('bundling');

MAIN: {
	my $community = 'public';
	my ($host,$mountpoint);
	my @exclude = qw//;
	my @regexclude = qw//;
	my @excludetype = qw//;
	my $warnlvl = 80;
	my $critlvl = 90;
	my ($error, $session, $result);
	my $table;
	my $debug = 0;

	$result = GetOptions(
		"host|hostname|H=s"	=> \$host,
		"community|C=s"		=> \$community,
		"mountpoint|m=s"	=> \$mountpoint,
		"exclude|e=s"		=> \@exclude,
		"regexclude|r=s"	=> \@regexclude,
		"excludetype=s"		=> \@excludetype,
		"warning|w=i"		=> \$warnlvl,
		"critical|c=i"		=> \$critlvl,
		"debug"		=> \$debug,
	);

	if (!$result) {
		print "UNKNOWN - no parameters specified\n";
		exit $UNKNOWN;
	}
	if (!$host) {
		print "UNKNOWN - hostname is missing\n";
		exit $UNKNOWN;
	}
	if (!$mountpoint && !@exclude && !@regexclude) {
		print "UNKNOWN - mountpoint or exclude is missing\n";
		exit $UNKNOWN;
	}

	my $grabber = new Net::SNMP::DskUsg::Cached;
	$table = $grabber->get($host, $community);

	if(!@exclude && !@regexclude && !@excludetype) {
		$table = $table->{$mountpoint} if($table->{$mountpoint});

		if (!$table) {
			print "UNKNOWN - no data for $mountpoint found\n";
			exit $UNKNOWN;
		}

		if ($debug == 1) {
			warn Dumper($table);
		}

		$table->{used_percent} = 0 unless $table->{used_percent};
		if ($table->{used_percent} > $critlvl) {
			print "SNMP CRITICAL - " . $table->{used_percent} . " | usg=" . $table->{used_percent} . ";$warnlvl;$critlvl;0\n";
			exit $CRITICAL;
		}

		if ($table->{used_percent} > $warnlvl) {
			print "SNMP WARNING - ".$table->{used_percent} . " | usg=" . $table->{used_percent} . ";$warnlvl;$critlvl;0\n";
			exit $WARNING;
		}

		print "SNMP OK - ".$table->{used_percent} . " | usg=" . $table->{used_percent} . ";$warnlvl;$critlvl;0\n";
		exit $OK;
	} else {
		my $status = $OK;
		my $excl;
		$excl->{$_} = 1 foreach(@exclude);
		my $perfdata = "";
		my $message = "";
		my $crit = "";
		my $warn = "";
		foreach(keys %{$table}) {
			next if $excl->{$_};
			my $skip = 0;
			foreach my $regexcl (@regexclude) {
				$skip = 1 if $_ =~ $regexcl;
			}
			foreach my $excltype (@excludetype) {
				$skip = 1 if $table->{$_}->{type} eq $excltype;
			}
			next if $skip;
			$table->{$_}->{used_percent} = 0 unless $table->{$_}->{used_percent};
			if ($table->{$_}->{used_percent} > $critlvl) {
				$crit .= "'$_' = $table->{$_}->{used_percent} > $critlvl ";
				$status = $CRITICAL;
			} elsif ($table->{$_}->{used_percent} > $warnlvl) {
				$warn .= "'$_' = $table->{$_}->{used_percent} > $warnlvl ";
				$status = $WARNING if $status != $CRITICAL;
			} else {
				$message .= "'$_' = $table->{$_}->{used_percent} ";
			}
			$perfdata .= "'$_'=" . $table->{$_}->{used_percent} . ";$warnlvl;$critlvl;0 ";
		}
		if($status == $OK) {
			print "SNMP OK - $message | $perfdata";
			exit $OK;
		} elsif($status == $WARNING) {
			print "SNMP WARNING - $warn | $perfdata"; 
			exit $status;
		} elsif ($status == $CRITICAL) {
			print "SNMP CRITICAL - $crit ";
			print "(WARNING: $warn)" if $warn;
			print " | $perfdata"; 
			exit $status;
		} else {
			# Duh!?
			exit -100;
		}
	}
}

sub _convert {
	defined (my $size = shift) || return undef;
	my $block = 1024;
	my @args = qw/B K M G/;
	while (@args && $size > $block) {
		shift @args;
		$size /= $block;
	}
	$size = sprintf("%.2f",$size);
	"$size$args[0]";
}

# vim: tabstop=4:
